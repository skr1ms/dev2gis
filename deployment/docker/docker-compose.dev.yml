# run with: docker compose --env-file .env.dev -f deployment/docker/docker-compose.dev.yml up --build -d

services:
  postgres:
    image: postgres:17-alpine
    container_name: dev-uav-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - uav-network

  rabbitmq:
    image: rabbitmq:4.2-alpine
    container_name: dev-uav-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: /
    command: >
      sh -c "
      rabbitmq-plugins enable rabbitmq_management rabbitmq_prometheus &&
      rabbitmq-server
      "
    ports:
      - "5672:5672"
      - "15672:15672"
      - "15692:15692"
    volumes:
      - rabbitmq_data_dev:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - uav-network

  minio:
    image: minio/minio:latest
    container_name: dev-uav-minio
    command: server /data --address ":9000" --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_CONSOLE_ADDRESS: ":9001"
      MINIO_ADDRESS: ":9000"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data_dev:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - uav-network

  minio-init:
    image: minio/mc:latest
    container_name: dev-uav-minio-init
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      until /usr/bin/mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}; do sleep 2; done;
      /usr/bin/mc mb myminio/${MINIO_UAV_DATA_BUCKET} --ignore-existing;
      /usr/bin/mc mb myminio/${MINIO_UAV_MODELS_BUCKET} --ignore-existing;
      /usr/bin/mc mb myminio/${MINIO_UAV_PHOTOPLANES_BUCKET} --ignore-existing;
      /usr/bin/mc anonymous set public myminio/${MINIO_UAV_DATA_BUCKET};
      /usr/bin/mc anonymous set public myminio/${MINIO_UAV_MODELS_BUCKET};
      /usr/bin/mc anonymous set public myminio/${MINIO_UAV_PHOTOPLANES_BUCKET};
      echo 'Buckets initialized successfully';
      exit 0;
      "
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_UAV_DATA_BUCKET=${MINIO_UAV_DATA_BUCKET}
      - MINIO_UAV_MODELS_BUCKET=${MINIO_UAV_MODELS_BUCKET}
      - MINIO_UAV_PHOTOPLANES_BUCKET=${MINIO_UAV_PHOTOPLANES_BUCKET}
    networks:
      - uav-network
    restart: "no"

  nodeodm:
    image: opendronemap/nodeodm:latest
    container_name: dev-uav-nodeodm
    environment:
      - ODM_MAX_CONCURRENCY=${NODEODM_MAX_CONCURRENCY:-1}
    ports:
      - "3500:3000"
    volumes:
      - nodeodm_data_dev:/var/www/data
    networks:
      - uav-network
    restart: unless-stopped

  python-heightmap:
    build:
      context: ../../backend/python-services/heightmap-service
      dockerfile: Dockerfile
    container_name: dev-uav-python-workers
    environment:
      RABBITMQ_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/
      RABBITMQ_QUEUE_NAME: ${RABBITMQ_QUEUE_NAME}
      RABBITMQ_PREFETCH_COUNT: ${RABBITMQ_PREFETCH_COUNT}
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_USE_SSL: "false"
      MINIO_INPUT_BUCKET: ${MINIO_UAV_DATA_BUCKET}
      MINIO_OUTPUT_BUCKET: ${MINIO_UAV_MODELS_BUCKET}
      TEMP_DIR: /tmp/heightmap_processing
      LOG_LEVEL: DEBUG
      PYTHONUNBUFFERED: "1"
      NODEODM_URL: http://nodeodm:3000
    ports:
      - "8000:8000"
    depends_on:
      minio:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      nodeodm:
        condition: service_started
    networks:
      - uav-network
    volumes:
      - python_heightmap_temp_dev:/tmp/heightmap_processing
    restart: unless-stopped

  go-orchestrator:
    build:
      context: ../../backend/go-orchestrator
      dockerfile: Dockerfile
    container_name: dev-uav-go-orchestrator
    environment:
      ENVIRONMENT: ${ENVIRONMENT}
      ENV_FILE: /dev/null
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_PUBLIC_URL: ${MINIO_PUBLIC_URL:-http://localhost:9000}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_UAV_DATA_BUCKET: ${MINIO_UAV_DATA_BUCKET}
      MINIO_UAV_MODELS_BUCKET: ${MINIO_UAV_MODELS_BUCKET}
      MINIO_UAV_PHOTOPLANES_BUCKET: ${MINIO_UAV_PHOTOPLANES_BUCKET}
      MINIO_USE_SSL: "false"
      MINIO_REGION: ${MINIO_REGION}
      PORT: 8080
      RABBITMQ_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/
      RABBITMQ_QUEUE_NAME: ${RABBITMQ_QUEUE_NAME}
      RABBITMQ_EXCHANGE: ${RABBITMQ_EXCHANGE}
      RABBITMQ_ROUTING_KEY: ${RABBITMQ_ROUTING_KEY}
      RABBITMQ_CONNECTION_TIMEOUT: ${RABBITMQ_CONNECTION_TIMEOUT}
      RABBITMQ_RECONNECT_DELAY: ${RABBITMQ_RECONNECT_DELAY}
      ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
      JWT_ACCESS_TTL: ${JWT_ACCESS_TTL}
      JWT_REFRESH_TTL: ${JWT_REFRESH_TTL}
      LOG_LEVEL: ${LOG_LEVEL}
      GIN_MODE: debug
    ports:
      - "8080:8080"
      - "9091:9091"
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - uav-network
    restart: unless-stopped

  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
      target: dev-nginx
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NEXT_PUBLIC_ENVIRONMENT: ${NEXT_PUBLIC_ENVIRONMENT}
    container_name: dev-uav-frontend
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_ENVIRONMENT: ${NEXT_PUBLIC_ENVIRONMENT}
      NODE_ENV: ${NODE_ENV}
    volumes:
      - ../nginx/dev.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    depends_on:
      - go-orchestrator
    networks:
      - uav-network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: dev-uav-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ../../monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_dev:/prometheus
    networks:
      - uav-network
    restart: unless-stopped

  loki:
    image: grafana/loki:latest
    container_name: dev-uav-loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    volumes:
      - ../../monitoring/loki/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data_dev:/loki
    networks:
      - uav-network
    restart: unless-stopped

  promtail:
    image: grafana/promtail:latest
    container_name: dev-uav-promtail
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ../../monitoring/promtail/promtail.yml:/etc/promtail/config.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - uav-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: dev-uav-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=${GRAFANA_ALLOW_SIGN_UP}
      - GF_SERVER_ROOT_URL=${GRAFANA_SERVER_ROOT_URL}
    ports:
      - "3000:3000"
    volumes:
      - grafana_data_dev:/var/lib/grafana
      - ../../monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ../../monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - uav-network
    restart: unless-stopped

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: dev-uav-postgres-exporter
    environment:
      DATA_SOURCE_NAME: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
    ports:
      - "9187:9187"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - uav-network
    restart: unless-stopped

volumes:
  postgres_data_dev:
    driver: local
  minio_data_dev:
    driver: local
  rabbitmq_data_dev:
    driver: local
  prometheus_data_dev:
    driver: local
  grafana_data_dev:
    driver: local
  loki_data_dev:
    driver: local
  python_heightmap_temp_dev:
    driver: local
  nodeodm_data_dev:
    driver: local

networks:
  uav-network:
    driver: bridge
