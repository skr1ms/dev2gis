// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: heightmap.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const CountUserHeightmaps = `-- name: CountUserHeightmaps :one
SELECT COUNT(*) FROM heightmap_jobs
WHERE user_id = $1
`

func (q *Queries) CountUserHeightmaps(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, CountUserHeightmaps, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateHeightmapJob = `-- name: CreateHeightmapJob :one
INSERT INTO heightmap_jobs (
    id, user_id, image_url, status, created_at, updated_at
) VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, image_url, result_url, status, width, height, error_message, processing_time, created_at, updated_at
`

type CreateHeightmapJobParams struct {
	ID        uuid.UUID `json:"id"`
	UserID    uuid.UUID `json:"user_id"`
	ImageUrl  string    `json:"image_url"`
	Status    string    `json:"status"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) CreateHeightmapJob(ctx context.Context, arg CreateHeightmapJobParams) (HeightmapJob, error) {
	row := q.db.QueryRow(ctx, CreateHeightmapJob,
		arg.ID,
		arg.UserID,
		arg.ImageUrl,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i HeightmapJob
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ImageUrl,
		&i.ResultUrl,
		&i.Status,
		&i.Width,
		&i.Height,
		&i.ErrorMessage,
		&i.ProcessingTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteHeightmapJob = `-- name: DeleteHeightmapJob :exec
DELETE FROM heightmap_jobs WHERE id = $1
`

func (q *Queries) DeleteHeightmapJob(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, DeleteHeightmapJob, id)
	return err
}

const GetHeightmapJob = `-- name: GetHeightmapJob :one
SELECT id, user_id, image_url, result_url, status, width, height, error_message, processing_time, created_at, updated_at FROM heightmap_jobs WHERE id = $1
`

func (q *Queries) GetHeightmapJob(ctx context.Context, id uuid.UUID) (HeightmapJob, error) {
	row := q.db.QueryRow(ctx, GetHeightmapJob, id)
	var i HeightmapJob
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ImageUrl,
		&i.ResultUrl,
		&i.Status,
		&i.Width,
		&i.Height,
		&i.ErrorMessage,
		&i.ProcessingTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetHeightmapJobByUserID = `-- name: GetHeightmapJobByUserID :one
SELECT id, user_id, image_url, result_url, status, width, height, error_message, processing_time, created_at, updated_at FROM heightmap_jobs WHERE id = $1 AND user_id = $2
`

type GetHeightmapJobByUserIDParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) GetHeightmapJobByUserID(ctx context.Context, arg GetHeightmapJobByUserIDParams) (HeightmapJob, error) {
	row := q.db.QueryRow(ctx, GetHeightmapJobByUserID, arg.ID, arg.UserID)
	var i HeightmapJob
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ImageUrl,
		&i.ResultUrl,
		&i.Status,
		&i.Width,
		&i.Height,
		&i.ErrorMessage,
		&i.ProcessingTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListHeightmapsByStatus = `-- name: ListHeightmapsByStatus :many
SELECT id, user_id, image_url, result_url, status, width, height, error_message, processing_time, created_at, updated_at FROM heightmap_jobs
WHERE status = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListHeightmapsByStatusParams struct {
	Status string `json:"status"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListHeightmapsByStatus(ctx context.Context, arg ListHeightmapsByStatusParams) ([]HeightmapJob, error) {
	rows, err := q.db.Query(ctx, ListHeightmapsByStatus, arg.Status, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HeightmapJob
	for rows.Next() {
		var i HeightmapJob
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ImageUrl,
			&i.ResultUrl,
			&i.Status,
			&i.Width,
			&i.Height,
			&i.ErrorMessage,
			&i.ProcessingTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListUserHeightmaps = `-- name: ListUserHeightmaps :many
SELECT id, user_id, image_url, result_url, status, width, height, error_message, processing_time, created_at, updated_at FROM heightmap_jobs
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListUserHeightmapsParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListUserHeightmaps(ctx context.Context, arg ListUserHeightmapsParams) ([]HeightmapJob, error) {
	rows, err := q.db.Query(ctx, ListUserHeightmaps, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HeightmapJob
	for rows.Next() {
		var i HeightmapJob
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ImageUrl,
			&i.ResultUrl,
			&i.Status,
			&i.Width,
			&i.Height,
			&i.ErrorMessage,
			&i.ProcessingTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateJobError = `-- name: UpdateJobError :exec
UPDATE heightmap_jobs
SET 
    status = 'failed',
    error_message = $2,
    updated_at = $3
WHERE id = $1
`

type UpdateJobErrorParams struct {
	ID           uuid.UUID `json:"id"`
	ErrorMessage *string   `json:"error_message"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) UpdateJobError(ctx context.Context, arg UpdateJobErrorParams) error {
	_, err := q.db.Exec(ctx, UpdateJobError, arg.ID, arg.ErrorMessage, arg.UpdatedAt)
	return err
}

const UpdateJobResult = `-- name: UpdateJobResult :exec
UPDATE heightmap_jobs
SET 
    status = $2,
    result_url = $3,
    width = $4,
    height = $5,
    processing_time = $6,
    updated_at = $7
WHERE id = $1
`

type UpdateJobResultParams struct {
	ID             uuid.UUID `json:"id"`
	Status         string    `json:"status"`
	ResultUrl      *string   `json:"result_url"`
	Width          *int32    `json:"width"`
	Height         *int32    `json:"height"`
	ProcessingTime *float64  `json:"processing_time"`
	UpdatedAt      time.Time `json:"updated_at"`
}

func (q *Queries) UpdateJobResult(ctx context.Context, arg UpdateJobResultParams) error {
	_, err := q.db.Exec(ctx, UpdateJobResult,
		arg.ID,
		arg.Status,
		arg.ResultUrl,
		arg.Width,
		arg.Height,
		arg.ProcessingTime,
		arg.UpdatedAt,
	)
	return err
}

const UpdateJobStatus = `-- name: UpdateJobStatus :exec
UPDATE heightmap_jobs
SET status = $2, updated_at = $3
WHERE id = $1
`

type UpdateJobStatusParams struct {
	ID        uuid.UUID `json:"id"`
	Status    string    `json:"status"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateJobStatus(ctx context.Context, arg UpdateJobStatusParams) error {
	_, err := q.db.Exec(ctx, UpdateJobStatus, arg.ID, arg.Status, arg.UpdatedAt)
	return err
}
