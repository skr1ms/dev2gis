// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: batch_heightmap.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const CreateBatchHeightmapJob = `-- name: CreateBatchHeightmapJob :one
INSERT INTO batch_heightmap_jobs (
    id, user_id, status, image_count, merge_method, generation_mode, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, user_id, status, result_url, orthophoto_url, width, height, image_count, processed_count, error_message, processing_time, merge_method, generation_mode, created_at, updated_at
`

type CreateBatchHeightmapJobParams struct {
	ID             uuid.UUID `json:"id"`
	UserID         uuid.UUID `json:"user_id"`
	Status         string    `json:"status"`
	ImageCount     int32     `json:"image_count"`
	MergeMethod    string    `json:"merge_method"`
	GenerationMode string    `json:"generation_mode"`
	CreatedAt      time.Time `json:"created_at"`
	UpdatedAt      time.Time `json:"updated_at"`
}

func (q *Queries) CreateBatchHeightmapJob(ctx context.Context, arg CreateBatchHeightmapJobParams) (BatchHeightmapJob, error) {
	row := q.db.QueryRow(ctx, CreateBatchHeightmapJob,
		arg.ID,
		arg.UserID,
		arg.Status,
		arg.ImageCount,
		arg.MergeMethod,
		arg.GenerationMode,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i BatchHeightmapJob
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.ResultUrl,
		&i.OrthophotoUrl,
		&i.Width,
		&i.Height,
		&i.ImageCount,
		&i.ProcessedCount,
		&i.ErrorMessage,
		&i.ProcessingTime,
		&i.MergeMethod,
		&i.GenerationMode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const CreateBatchImage = `-- name: CreateBatchImage :one
INSERT INTO batch_images (
    id, batch_job_id, image_url, status, created_at
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, batch_job_id, image_url, heightmap_job_id, status, created_at
`

type CreateBatchImageParams struct {
	ID         uuid.UUID   `json:"id"`
	BatchJobID pgtype.UUID `json:"batch_job_id"`
	ImageUrl   string      `json:"image_url"`
	Status     string      `json:"status"`
	CreatedAt  time.Time   `json:"created_at"`
}

func (q *Queries) CreateBatchImage(ctx context.Context, arg CreateBatchImageParams) (BatchImage, error) {
	row := q.db.QueryRow(ctx, CreateBatchImage,
		arg.ID,
		arg.BatchJobID,
		arg.ImageUrl,
		arg.Status,
		arg.CreatedAt,
	)
	var i BatchImage
	err := row.Scan(
		&i.ID,
		&i.BatchJobID,
		&i.ImageUrl,
		&i.HeightmapJobID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const GetBatchHeightmapJob = `-- name: GetBatchHeightmapJob :one
SELECT id, user_id, status, result_url, orthophoto_url, width, height, image_count, processed_count, error_message, processing_time, merge_method, generation_mode, created_at, updated_at FROM batch_heightmap_jobs
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBatchHeightmapJob(ctx context.Context, id uuid.UUID) (BatchHeightmapJob, error) {
	row := q.db.QueryRow(ctx, GetBatchHeightmapJob, id)
	var i BatchHeightmapJob
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.ResultUrl,
		&i.OrthophotoUrl,
		&i.Width,
		&i.Height,
		&i.ImageCount,
		&i.ProcessedCount,
		&i.ErrorMessage,
		&i.ProcessingTime,
		&i.MergeMethod,
		&i.GenerationMode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetBatchHeightmapJobByUserID = `-- name: GetBatchHeightmapJobByUserID :one
SELECT id, user_id, status, result_url, orthophoto_url, width, height, image_count, processed_count, error_message, processing_time, merge_method, generation_mode, created_at, updated_at FROM batch_heightmap_jobs
WHERE id = $1 AND user_id = $2 LIMIT 1
`

type GetBatchHeightmapJobByUserIDParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) GetBatchHeightmapJobByUserID(ctx context.Context, arg GetBatchHeightmapJobByUserIDParams) (BatchHeightmapJob, error) {
	row := q.db.QueryRow(ctx, GetBatchHeightmapJobByUserID, arg.ID, arg.UserID)
	var i BatchHeightmapJob
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.ResultUrl,
		&i.OrthophotoUrl,
		&i.Width,
		&i.Height,
		&i.ImageCount,
		&i.ProcessedCount,
		&i.ErrorMessage,
		&i.ProcessingTime,
		&i.MergeMethod,
		&i.GenerationMode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetBatchImages = `-- name: GetBatchImages :many
SELECT id, batch_job_id, image_url, heightmap_job_id, status, created_at FROM batch_images
WHERE batch_job_id = $1
ORDER BY created_at ASC
`

func (q *Queries) GetBatchImages(ctx context.Context, batchJobID pgtype.UUID) ([]BatchImage, error) {
	rows, err := q.db.Query(ctx, GetBatchImages, batchJobID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BatchImage
	for rows.Next() {
		var i BatchImage
		if err := rows.Scan(
			&i.ID,
			&i.BatchJobID,
			&i.ImageUrl,
			&i.HeightmapJobID,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListUserBatchHeightmaps = `-- name: ListUserBatchHeightmaps :many
SELECT id, user_id, status, result_url, orthophoto_url, width, height, image_count, processed_count, error_message, processing_time, merge_method, generation_mode, created_at, updated_at FROM batch_heightmap_jobs
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListUserBatchHeightmapsParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListUserBatchHeightmaps(ctx context.Context, arg ListUserBatchHeightmapsParams) ([]BatchHeightmapJob, error) {
	rows, err := q.db.Query(ctx, ListUserBatchHeightmaps, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BatchHeightmapJob
	for rows.Next() {
		var i BatchHeightmapJob
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Status,
			&i.ResultUrl,
			&i.OrthophotoUrl,
			&i.Width,
			&i.Height,
			&i.ImageCount,
			&i.ProcessedCount,
			&i.ErrorMessage,
			&i.ProcessingTime,
			&i.MergeMethod,
			&i.GenerationMode,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateBatchImageStatus = `-- name: UpdateBatchImageStatus :exec
UPDATE batch_images
SET status = $2, heightmap_job_id = $3
WHERE id = $1
`

type UpdateBatchImageStatusParams struct {
	ID             uuid.UUID   `json:"id"`
	Status         string      `json:"status"`
	HeightmapJobID pgtype.UUID `json:"heightmap_job_id"`
}

func (q *Queries) UpdateBatchImageStatus(ctx context.Context, arg UpdateBatchImageStatusParams) error {
	_, err := q.db.Exec(ctx, UpdateBatchImageStatus, arg.ID, arg.Status, arg.HeightmapJobID)
	return err
}

const UpdateBatchJobError = `-- name: UpdateBatchJobError :exec
UPDATE batch_heightmap_jobs
SET status = 'failed', error_message = $2, updated_at = $3
WHERE id = $1
`

type UpdateBatchJobErrorParams struct {
	ID           uuid.UUID `json:"id"`
	ErrorMessage *string   `json:"error_message"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) UpdateBatchJobError(ctx context.Context, arg UpdateBatchJobErrorParams) error {
	_, err := q.db.Exec(ctx, UpdateBatchJobError, arg.ID, arg.ErrorMessage, arg.UpdatedAt)
	return err
}

const UpdateBatchJobProgress = `-- name: UpdateBatchJobProgress :exec
UPDATE batch_heightmap_jobs
SET processed_count = $2, updated_at = $3
WHERE id = $1
`

type UpdateBatchJobProgressParams struct {
	ID             uuid.UUID `json:"id"`
	ProcessedCount int32     `json:"processed_count"`
	UpdatedAt      time.Time `json:"updated_at"`
}

func (q *Queries) UpdateBatchJobProgress(ctx context.Context, arg UpdateBatchJobProgressParams) error {
	_, err := q.db.Exec(ctx, UpdateBatchJobProgress, arg.ID, arg.ProcessedCount, arg.UpdatedAt)
	return err
}

const UpdateBatchJobResult = `-- name: UpdateBatchJobResult :exec
UPDATE batch_heightmap_jobs
SET status = $2, result_url = $3, orthophoto_url = $4, width = $5, height = $6, 
    processing_time = $7, updated_at = $8
WHERE id = $1
`

type UpdateBatchJobResultParams struct {
	ID             uuid.UUID `json:"id"`
	Status         string    `json:"status"`
	ResultUrl      *string   `json:"result_url"`
	OrthophotoUrl  *string   `json:"orthophoto_url"`
	Width          *int32    `json:"width"`
	Height         *int32    `json:"height"`
	ProcessingTime *float64  `json:"processing_time"`
	UpdatedAt      time.Time `json:"updated_at"`
}

func (q *Queries) UpdateBatchJobResult(ctx context.Context, arg UpdateBatchJobResultParams) error {
	_, err := q.db.Exec(ctx, UpdateBatchJobResult,
		arg.ID,
		arg.Status,
		arg.ResultUrl,
		arg.OrthophotoUrl,
		arg.Width,
		arg.Height,
		arg.ProcessingTime,
		arg.UpdatedAt,
	)
	return err
}

const UpdateBatchJobStatus = `-- name: UpdateBatchJobStatus :exec
UPDATE batch_heightmap_jobs
SET status = $2, updated_at = $3
WHERE id = $1
`

type UpdateBatchJobStatusParams struct {
	ID        uuid.UUID `json:"id"`
	Status    string    `json:"status"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateBatchJobStatus(ctx context.Context, arg UpdateBatchJobStatusParams) error {
	_, err := q.db.Exec(ctx, UpdateBatchJobStatus, arg.ID, arg.Status, arg.UpdatedAt)
	return err
}
