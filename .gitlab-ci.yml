include:
  - .gitlab-ci-prod.yml
  - .gitlab-ci-dev.yml

workflow:
  rules:
    - if: '$FORCE_BUILD_ALL == "true"'
      when: always
    - changes:
        - "README.md"
        - "docs/**/*"
      when: never
    - when: always

stages:
  - build
  - test
  - deploy
  - cleanup

variables:
  FORCE_BUILD_ALL: "false"
  DOCKER_BUILDKIT: "1"
  DOCKER_CLI_IMAGE: docker:28.5.0-cli
  GO_IMAGE: golang:1.25-alpine
  PYTHON_IMAGE: python:3.12-alpine
  NODE_IMAGE: node:24-alpine
  RABBITMQ_IMAGE: rabbitmq:4.2-alpine
  POSTGRES_IMAGE: postgres:17-alpine

.shared_changes: &shared_changes
  - .gitlab-ci.yml
  - .gitlab-ci-*.yml
  - deployment/**/*
  - Makefile

.go_orchestrator_changes: &go_orchestrator_changes
  - backend/go-orchestrator/**/*
  - backend/go-orchestrator/Dockerfile
  - backend/go-orchestrator/go.mod
  - backend/go-orchestrator/go.sum

.python_heightmap_changes: &python_heightmap_changes
  - backend/python-services/heightmap-service/**/*
  - backend/python-services/heightmap-service/Dockerfile
  - backend/python-services/heightmap-service/requirements.txt

.frontend_changes: &frontend_changes
  - frontend/**/*
  - frontend/Dockerfile
  - frontend/package.json
  - frontend/package-lock.json
  - frontend/next.config.js
  - frontend/tailwind.config.js
  - frontend/postcss.config.js
  - frontend/tsconfig.json

.default-docker-login:
  image: $DOCKER_CLI_IMAGE
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" --password-stdin

# BUILD
build:go-orchestrator:
  stage: build
  extends: .default-docker-login
  script:
    - docker pull "$CI_REGISTRY_IMAGE/go-orchestrator:branch-${CI_COMMIT_REF_SLUG}" || docker pull "$CI_REGISTRY_IMAGE/go-orchestrator:latest" || true
    - docker build 
      --cache-from "$CI_REGISTRY_IMAGE/go-orchestrator:branch-${CI_COMMIT_REF_SLUG}"
      --cache-from "$CI_REGISTRY_IMAGE/go-orchestrator:latest"
      --build-arg BUILDKIT_INLINE_CACHE=1
      -t "$CI_REGISTRY_IMAGE/go-orchestrator:${CI_COMMIT_SHA}" 
      -t "$CI_REGISTRY_IMAGE/go-orchestrator:branch-${CI_COMMIT_REF_SLUG}" 
      backend/go-orchestrator
    - docker push "$CI_REGISTRY_IMAGE/go-orchestrator:${CI_COMMIT_SHA}"
    - docker push "$CI_REGISTRY_IMAGE/go-orchestrator:branch-${CI_COMMIT_REF_SLUG}"
  rules:
    - if: '$FORCE_BUILD_ALL == "true"'
      when: always
    - changes: *go_orchestrator_changes
      when: always
    - changes: *shared_changes
      when: always
    - when: never

build:python-heightmap:
  stage: build
  extends: .default-docker-login
  script:
    - docker pull "$CI_REGISTRY_IMAGE/python-heightmap:branch-${CI_COMMIT_REF_SLUG}" || docker pull "$CI_REGISTRY_IMAGE/python-heightmap:latest" || true
    - docker build 
      --cache-from "$CI_REGISTRY_IMAGE/python-heightmap:branch-${CI_COMMIT_REF_SLUG}"
      --cache-from "$CI_REGISTRY_IMAGE/python-heightmap:latest"
      --build-arg BUILDKIT_INLINE_CACHE=1
      -t "$CI_REGISTRY_IMAGE/python-heightmap:${CI_COMMIT_SHA}" 
      -t "$CI_REGISTRY_IMAGE/python-heightmap:branch-${CI_COMMIT_REF_SLUG}" 
      backend/python-services/heightmap-service
    - docker push "$CI_REGISTRY_IMAGE/python-heightmap:${CI_COMMIT_SHA}"
    - docker push "$CI_REGISTRY_IMAGE/python-heightmap:branch-${CI_COMMIT_REF_SLUG}"
  rules:
    - if: '$FORCE_BUILD_ALL == "true"'
      when: always
    - changes: *python_heightmap_changes
      when: always
    - changes: *shared_changes
      when: always
    - when: never

build:frontend:
  stage: build
  extends: .default-docker-login
  script:
    - docker pull "$CI_REGISTRY_IMAGE/frontend:branch-${CI_COMMIT_REF_SLUG}" || docker pull "$CI_REGISTRY_IMAGE/frontend:latest" || true
    - docker build 
      --cache-from "$CI_REGISTRY_IMAGE/frontend:branch-${CI_COMMIT_REF_SLUG}"
      --cache-from "$CI_REGISTRY_IMAGE/frontend:latest"
      --build-arg BUILDKIT_INLINE_CACHE=1
      --build-arg NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      --build-arg NEXT_PUBLIC_ENVIRONMENT=${CI_COMMIT_BRANCH}
      --target production
      -t "$CI_REGISTRY_IMAGE/frontend:${CI_COMMIT_SHA}" 
      -t "$CI_REGISTRY_IMAGE/frontend:branch-${CI_COMMIT_REF_SLUG}" 
      frontend
    - docker push "$CI_REGISTRY_IMAGE/frontend:${CI_COMMIT_SHA}"
    - docker push "$CI_REGISTRY_IMAGE/frontend:branch-${CI_COMMIT_REF_SLUG}"
  rules:
    - if: '$FORCE_BUILD_ALL == "true"'
      when: always
    - changes: *frontend_changes
      when: always
    - changes: *shared_changes
      when: always
    - when: never

# TESTS
test:go:
  stage: test
  image: $GO_IMAGE
  services:
    - $POSTGRES_IMAGE
    - $RABBITMQ_IMAGE
  variables:
    POSTGRES_DB: uav_heights_map_test
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    POSTGRES_HOST: postgres
    RABBITMQ_DEFAULT_USER: admin
    RABBITMQ_DEFAULT_PASS: admin
    RABBITMQ_HOST: rabbitmq
    RABBITMQ_URL: amqp://admin:admin@rabbitmq:5672/
    RABBITMQ_QUEUE_NAME: test.heightmap.tasks
    RABBITMQ_EXCHANGE: ""
    RABBITMQ_ROUTING_KEY: test.heightmap.tasks
    RABBITMQ_PREFETCH_COUNT: "1"
    RABBITMQ_CONNECTION_TIMEOUT: 30s
    RABBITMQ_RECONNECT_DELAY: 5s
    RABBITMQ_PUBLISH_RETRIES: "3"
    RABBITMQ_DURABLE_QUEUE: "true"
    RABBITMQ_AUTO_DELETE: "false"
  before_script:
    - apk add --no-cache bash git build-base postgresql-client curl netcat-openbsd
    - for i in $(seq 1 25); do PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -U $POSTGRES_USER -d $POSTGRES_DB -c 'select 1' >/dev/null 2>&1 && break; sleep 2; done
    - for i in $(seq 1 30); do nc -zv $RABBITMQ_HOST 5672 >/dev/null 2>&1 && break; sleep 2; done
    - cd backend/go-orchestrator && go mod download
  script: go test -v -race -cover ./... || true
  needs: ["build:go-orchestrator"]
  rules:
    - if: '$FORCE_BUILD_ALL == "true"'
      when: always
    - changes: *go_orchestrator_changes
      when: always
    - changes: *shared_changes
      when: always
    - when: never

test:python-heightmap:
  stage: test
  image: $PYTHON_IMAGE
  services:
    - $POSTGRES_IMAGE
    - $RABBITMQ_IMAGE
  variables:
    POSTGRES_DB: uav_heights_map_test
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    DATABASE_URL: postgresql://postgres:postgres@postgres:5432/uav_heights_map_test
    RABBITMQ_URL: amqp://admin:admin@rabbitmq:5672/
    RABBITMQ_QUEUE_NAME: test.heightmap.tasks
  before_script:
    - apk add --no-cache bash gcc musl-dev linux-headers postgresql-client curl
    - for i in $(seq 1 25); do PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U $POSTGRES_USER -d $POSTGRES_DB -c 'select 1' >/dev/null 2>&1 && break; sleep 2; done
    - cd backend/python-services/heightmap-service
    - pip install --no-cache-dir -r requirements.txt
    - pip install --no-cache-dir pytest pytest-cov pytest-asyncio
  script: pytest tests/ --cov=heightmap_service --cov-report=term-missing || true
  needs: ["build:python-heightmap"]
  rules:
    - if: '$FORCE_BUILD_ALL == "true"'
      when: always
    - changes: *python_heightmap_changes
      when: always
    - changes: *shared_changes
      when: always
    - when: never

test:frontend:
  stage: test
  image: $NODE_IMAGE
  before_script:
    - apk add --no-cache bash
    - cd frontend && npm ci
  script: (cd frontend || true; npm test -- --coverage --watchAll=false || true)
  needs: ["build:frontend"]
  rules:
    - if: '$FORCE_BUILD_ALL == "true"'
      when: always
    - changes: *frontend_changes
      when: always
    - changes: *shared_changes
      when: always
    - when: never

# CLEANUP
docker:gc:
  stage: cleanup
  image: $DOCKER_CLI_IMAGE
  script:
    - docker image prune -af --filter "until=24h" || true
    - docker builder prune -af --filter "until=24h" || true
  rules:
    - when: always
  allow_failure: true